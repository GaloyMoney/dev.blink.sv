"use strict";(self.webpackChunkdev_blink_sv=self.webpackChunkdev_blink_sv||[]).push([[598],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=l,h=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4746:(e,t,n)=>{n.d(t,{H:()=>o,a:()=>r});var a=n(7294);const l=(0,a.createContext)(),r=()=>(0,a.useContext)(l),o=e=>{let{children:t}=e;const[n,r]=(0,a.useState)(null),[o,i]=(0,a.useState)("https://api.blink.sv/graphql"),[s,u]=(0,a.useState)(""),[d,c]=(0,a.useState)(""),p={authToken:n,setAuthToken:r,apiEndpoint:o,setApiEndpoint:i,accountWalletId:s,setAccountWalletId:u,paymentRequest:d,setPaymentRequest:c};return a.createElement(l.Provider,{value:p},t)}},3910:(e,t,n)=>{n.d(t,{_:()=>i});var a=n(7294),l=n(7900),r=n(4746),o=n(2620);function i(){const{authToken:e,apiEndpoint:t}=(0,r.a)(),[n,i]=(0,a.useState)(""),[s,u]=(0,a.useState)(null),[d,c]=(0,a.useState)(null),p="  query Me {\n    me {\n      defaultAccount {\n        wallets {\n          id\n          walletCurrency\n          balance\n        }\n      }\n    }\n  }";return(0,a.useEffect)((()=>{(0,o.yL)({operation:p,type:"wallet",setCurlCommand:i,authToken:e,apiEndpoint:t,walletCurrency:"USD"})}),[e,t]),a.createElement("div",null,a.createElement("button",{onClick:async()=>{c(null),u(null);try{const n=await(0,l.K)(e,t,p);u(n),(0,o.yL)({operation:p,type:"wallet",setCurlCommand:i,authToken:e,apiEndpoint:t,walletCurrency:"USD"})}catch(n){c(n.message)}}},"Send the request"),a.createElement("div",{style:{marginTop:"10px"}}),d&&a.createElement("div",{style:{color:"red"}},"Error: ",d),s&&a.createElement("div",null,a.createElement("strong",null,"Response:")," ",a.createElement("pre",{style:{marginLeft:"10px"}},JSON.stringify(s,null,2))),a.createElement("div",{style:{marginTop:"20px",marginBottom:"40px"}},a.createElement("div",{style:{fontWeight:"bold"}},"curl command to get the USD wallet ID"),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("pre",{style:{backgroundColor:"auto",padding:"10px",marginLeft:"10px",overflowX:"auto",whiteSpace:"pre-wrap"}},n)))}},9816:(e,t,n)=>{n.d(t,{n:()=>i});var a=n(7294),l=n(7900),r=n(4746),o=n(2620);function i(){const{authToken:e,apiEndpoint:t,accountWalletId:n,setAccountWalletId:i}=(0,r.a)(),[s,u]=(0,a.useState)(),[d,c]=(0,a.useState)(100),[p,m]=(0,a.useState)(""),[h,y]=(0,a.useState)(null),[g,v]=(0,a.useState)(null),E="mutation onChainUsdPaymentSend($input: OnChainUsdPaymentSendInput!) {\n  onChainUsdPaymentSend(input: $input) {\n    errors {\n      message\n    }\n    status\n  }\n}";(0,a.useEffect)((()=>{(0,o.yL)({operation:E,type:"onChainSend",setCurlCommand:m,authToken:e,apiEndpoint:t,walletId:n,address:s,amount:d})}),[e,t,n,d,s]);return a.createElement("div",null,a.createElement("div",null,a.createElement("div",{style:{fontWeight:"bold"}},"Set the variables"),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("div",null,a.createElement("label",null,a.createElement("div",null,"Amount (USD cents):"),a.createElement("input",{type:"number",value:d,onChange:e=>{c(e.target.value)},style:{marginLeft:"10px",width:"50%"}}))),a.createElement("div",null,a.createElement("label",null,a.createElement("div",null,"Onchain address:"),a.createElement("input",{type:"text",value:s,onChange:e=>{u(e.target.value)},style:{marginLeft:"10px",width:"50%"}}))),a.createElement("label",null,a.createElement("div",null,"USD wallet ID:"),a.createElement("input",{type:"text",value:n,onChange:e=>{i(e.target.value)},style:{marginLeft:"10px",width:"50%"},placeholder:"Paste the USD wallet ID from the response above"}))),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("button",{onClick:async()=>{v(null),y(null);const a={input:{walletId:n,address:s,amount:d}};try{const r=await(0,l.K)(e,t,E,a);y(r),(0,o.yL)({operation:E,type:"onChainSend",setCurlCommand:m,authToken:e,apiEndpoint:t,walletId:n,address:s,amount:d})}catch(r){v(r.message)}}},"Send the transaction"),a.createElement("div",{style:{marginTop:"10px"}}),g&&a.createElement("div",{style:{color:"red"}},"Error: ",g),h&&a.createElement("div",null,a.createElement("strong",null,"Response:")," ",a.createElement("pre",{style:{marginLeft:"10px"}},JSON.stringify(h,null,2))),a.createElement("div",{style:{marginTop:"20px",marginBottom:"40px"}},a.createElement("div",{style:{fontWeight:"bold"}},"curl command to send the transaction"),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("pre",{style:{backgroundColor:"auto",padding:"10px",marginLeft:"10px",overflowX:"auto",whiteSpace:"pre-wrap"}},p)))}},6005:(e,t,n)=>{n.d(t,{B:()=>i});var a=n(7294),l=n(7900),r=n(4746),o=n(2620);function i(){const{authToken:e,apiEndpoint:t,accountWalletId:n,setAccountWalletId:i}=(0,r.a)(),[s,u]=(0,a.useState)(),[d,c]=(0,a.useState)(546),[p,m]=(0,a.useState)(""),[h,y]=(0,a.useState)(null),[g,v]=(0,a.useState)(null),E="mutation onChainUsdPaymentSendAsBtcDenominated($input: OnChainUsdPaymentSendAsBtcDenominatedInput!) {\n  onChainUsdPaymentSendAsBtcDenominated(input: $input) {\n    errors {\n      message\n    }\n    status\n  }\n}";(0,a.useEffect)((()=>{(0,o.yL)({operation:E,type:"onChainSend",setCurlCommand:m,authToken:e,apiEndpoint:t,walletId:n,address:s,amount:d})}),[e,t,n,d,s]);return a.createElement("div",null,a.createElement("div",null,a.createElement("div",{style:{fontWeight:"bold"}},"Set the variables"),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("div",null,a.createElement("label",null,a.createElement("div",null,"Amount (sats):"),a.createElement("input",{type:"number",value:d,onChange:e=>{c(e.target.value)},style:{marginLeft:"10px",width:"50%"}}))),a.createElement("div",null,a.createElement("label",null,a.createElement("div",null,"Onchain address:"),a.createElement("input",{type:"text",value:s,onChange:e=>{u(e.target.value)},style:{marginLeft:"10px",width:"50%"}}))),a.createElement("label",null,a.createElement("div",null,"USD wallet ID:"),a.createElement("input",{type:"text",value:n,onChange:e=>{i(e.target.value)},style:{marginLeft:"10px",width:"50%"},placeholder:"Paste the USD wallet ID from the response above"}))),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("button",{onClick:async()=>{v(null),y(null);const a={input:{walletId:n,address:s,amount:d}};try{const r=await(0,l.K)(e,t,E,a);y(r),(0,o.yL)({operation:E,type:"onChainSend",setCurlCommand:m,authToken:e,apiEndpoint:t,walletId:n,address:s,amount:d})}catch(r){v(r.message)}}},"Send the transaction"),a.createElement("div",{style:{marginTop:"10px"}}),g&&a.createElement("div",{style:{color:"red"}},"Error: ",g),h&&a.createElement("div",null,a.createElement("strong",null,"Response:")," ",a.createElement("pre",{style:{marginLeft:"10px"}},JSON.stringify(h,null,2))),a.createElement("div",{style:{marginTop:"20px",marginBottom:"40px"}},a.createElement("div",{style:{fontWeight:"bold"}},"curl command to send the transaction"),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("pre",{style:{backgroundColor:"auto",padding:"10px",marginLeft:"10px",overflowX:"auto",whiteSpace:"pre-wrap"}},p)))}},6844:(e,t,n)=>{n.d(t,{m:()=>i});var a=n(7294),l=n(7900),r=n(4746),o=n(2620);function i(){const{authToken:e,apiEndpoint:t,accountWalletId:n,setAccountWalletId:i}=(0,r.a)(),[s,u]=(0,a.useState)(),[d,c]=(0,a.useState)(100),[p,m]=(0,a.useState)(""),[h,y]=(0,a.useState)(null),[g,v]=(0,a.useState)(null),E="query onChainUsdTxFee($walletId: WalletId!, $address: OnChainAddress!, $amount: CentAmount!) {\n  onChainUsdTxFee(walletId: $walletId, address: $address, amount: $amount) {\n    amount\n  }\n}";(0,a.useEffect)((()=>{(0,o.yL)({operation:E,type:"onChainTxFee",setCurlCommand:m,authToken:e,apiEndpoint:t,walletId:n,address:s,amount:d})}),[e,t,n,d,s]);return a.createElement("div",null,a.createElement("div",null,a.createElement("div",{style:{fontWeight:"bold"}},"Set the variables"),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("div",null,a.createElement("label",null,a.createElement("div",null,"Amount (USD cents):"),a.createElement("input",{type:"number",value:d,onChange:e=>{c(e.target.value)},style:{marginLeft:"10px",width:"50%"}}))),a.createElement("div",null,a.createElement("label",null,a.createElement("div",null,"Onchain address:"),a.createElement("input",{type:"text",value:s,onChange:e=>{u(e.target.value)},style:{marginLeft:"10px",width:"50%"}}))),a.createElement("label",null,a.createElement("div",null,"USD wallet ID:"),a.createElement("input",{type:"text",value:n,onChange:e=>{i(e.target.value)},style:{marginLeft:"10px",width:"50%"},placeholder:"Paste the USD wallet ID from the response above"}))),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("button",{onClick:async()=>{v(null),y(null);const a={walletId:n,address:s,amount:d};try{const r=await(0,l.K)(e,t,E,a);y(r),(0,o.yL)({operation:E,type:"onChainTxFee",setCurlCommand:m,authToken:e,apiEndpoint:t,walletId:n,address:s,amount:d})}catch(r){v(r.message)}}},"Estimate the transaction fee"),a.createElement("div",{style:{marginTop:"10px"}}),g&&a.createElement("div",{style:{color:"red"}},"Error: ",g),h&&a.createElement("div",null,a.createElement("strong",null,"Response:")," ",a.createElement("pre",{style:{marginLeft:"10px"}},JSON.stringify(h,null,2))),a.createElement("div",{style:{marginTop:"20px",marginBottom:"40px"}},a.createElement("div",{style:{fontWeight:"bold"}},"curl command to estimate the transaction fee"),a.createElement("div",{style:{marginTop:"10px"}}),a.createElement("pre",{style:{backgroundColor:"auto",padding:"10px",marginLeft:"10px",overflowX:"auto",whiteSpace:"pre-wrap"}},p)))}},2698:(e,t,n)=>{n.d(t,{k:()=>r});var a=n(7294),l=n(4746);function r(){const{apiEndpoint:e,setApiEndpoint:t}=(0,l.a)();return a.createElement("div",null,a.createElement("div",null,"The GraphQL endpoint to connect to:"),a.createElement("select",{type:"text",value:e,onChange:e=>{t(e.target.value)},style:{width:"50%",marginBottom:"10px"}},a.createElement("option",{value:"https://api.blink.sv/graphql"},"Blink (mainnet) - https://api.blink.sv/graphql"),a.createElement("option",{value:"https://api.staging.galoy.io/graphql"},"Staging (signet) - https://api.staging.galoy.io/graphql")))}},65:(e,t,n)=>{n.d(t,{T:()=>r});var a=n(7294),l=n(4746);function r(){const{setAuthToken:e}=(0,l.a)();return a.createElement("div",null,a.createElement("div",null,"A valid authentication token is required in the header as a bearer token:"),a.createElement("input",{type:"text",placeholder:"Paste the authentication token to use it",onChange:t=>{e(t.target.value)},style:{width:"50%",marginBottom:"10px"}}))}},7900:(e,t,n)=>{n.d(t,{K:()=>a});const a=async function(e,t,n,a){if(void 0===a&&(a={}),!e)throw new Error("Not authenticated");if(!n)throw new Error("No GraphQL query provided");try{const l=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`bearer ${e}`},body:JSON.stringify({query:n,variables:a})});if(!l.ok){const e=await l.text();throw new Error(`Error response from server: ${e}`)}const r=l.headers.get("content-type");if(r&&r.includes("application/json")){return await l.json()}throw new Error(`Unexpected content type: ${r}`)}catch(l){throw console.error("There was an error making the authenticated request:",l),l}}},2620:(e,t,n)=>{n.d(t,{OP:()=>a,qF:()=>l,yL:()=>r});const a=(e,t)=>{const n={email:t};return`curl -X POST '${e}/email/code' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --data '${JSON.stringify(n)}'`},l=(e,t,n)=>`curl -X POST '${`${e}/email/login`}' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --data '${JSON.stringify({code:n,emailLoginId:t})}'`;function r(e){let{operation:t,type:n="",setCurlCommand:a,authToken:l,apiEndpoint:r,amount:o,paymentRequest:i="",walletId:s="",walletCurrency:u="",address:d}=e,c={query:t.trim(),variables:{}};const p=l?`--header 'Authorization: Bearer ${l}'`:"--header 'Authorization: Bearer <YOUR_AUTH_TOKEN_HERE>'";"invoice"===n?c.variables.input={amount:o.toString(),walletId:s}:"feeProbe"===n||"lnInvoicePaymentSend"===n?c.variables.input={paymentRequest:i,walletId:s}:"onChainTxFee"===n?c.variables={walletId:s,address:d,amount:o}:"onChainSend"===n&&(c.variables.input={walletId:s,address:d,amount:o});let m=JSON.stringify(c).replace(/\n/g,"");a("wallet"===n?`curl -sS --request POST --header 'content-type: application/json' \\\n  ${p} \\\n  --url '${r}' \\\n  --data '{"query":"query me { me { defaultAccount { wallets { id walletCurrency }}}}", "variables":{}}' \\\n| jq '.data.me.defaultAccount.wallets[] | select(.walletCurrency == "${u}") .id'`:`curl --request POST --header 'content-type: application/json' \\\n  ${p} \\\n  --url '${r}' \\\n  --data '${m}'`)}},1013:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>m,default:()=>f,frontMatter:()=>p,metadata:()=>h,toc:()=>g});var a=n(7462),l=(n(7294),n(3905)),r=n(4746),o=n(2698),i=n(65),s=n(3910),u=n(6844),d=n(9816),c=n(6005);const p={id:"usd-onchain-send",title:"Send USD onchain",slug:"/api/usd-onchain-send"},m=void 0,h={unversionedId:"api/usd-onchain-send",id:"api/usd-onchain-send",title:"Send USD onchain",description:"Get the wallet IDs and check the balances",source:"@site/docs/api/g-usd-onchain-send.mdx",sourceDirName:"api",slug:"/api/usd-onchain-send",permalink:"/api/usd-onchain-send",draft:!1,tags:[],version:"current",frontMatter:{id:"usd-onchain-send",title:"Send USD onchain",slug:"/api/usd-onchain-send"},sidebar:"apiSidebar",previous:{title:"Receive USD onchain",permalink:"/api/usd-onchain-receive"},next:{title:"Error handling",permalink:"/api/errors"}},y={},g=[{value:"Get the wallet IDs and check the balances",id:"get-the-wallet-ids-and-check-the-balances",level:3},{value:"Estimate",id:"estimate",level:3},{value:"Send a transaction in USD cents",id:"send-a-transaction-in-usd-cents",level:3},{value:"Send a transaction in satoshis",id:"send-a-transaction-in-satoshis",level:3}],v={toc:g},E="wrapper";function f(e){let{components:t,...n}=e;return(0,l.kt)(E,(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(r.H,{mdxType:"AuthProvider"},(0,l.kt)(o.k,{mdxType:"SetApiEndpoint"}),(0,l.kt)(i.T,{mdxType:"SetAuthToken"}),(0,l.kt)("h3",{id:"get-the-wallet-ids-and-check-the-balances"},"Get the wallet IDs and check the balances"),(0,l.kt)("p",null,"Can run this query at any stage to confirm the change in the balances.",(0,l.kt)("br",null),'\nThe "BTC" wallet balance is denominated in satoshis.',(0,l.kt)("br",null),'\nThe "USD" wallet balance is in cents.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"The body of the GraphQL request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query Me {\n  me {\n    defaultAccount {\n      wallets {\n        id\n        walletCurrency\n        balance\n      }\n    }\n  }\n}\n")),(0,l.kt)(s._,{mdxType:"GetWalletDataUsd"}),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"estimate"},"Estimate"),(0,l.kt)("p",null,"Estimate how many satoshis the transaction will cost."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"The body of the GraphQL request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query onChainUsdTxFee($walletId: WalletId!, $address: OnChainAddress!, $amount: CentAmount!) {\n  onChainUsdTxFee(walletId: $walletId, address: $address, amount: $amount) {\n    amount\n  }\n}\n")),(0,l.kt)(u.m,{mdxType:"OnChainUsdTxFee"}),(0,l.kt)("h3",{id:"send-a-transaction-in-usd-cents"},"Send a transaction in USD cents"),(0,l.kt)("p",null,"Send a transaction onchain from your USD account with the amount denominated in USD cents.",(0,l.kt)("br",null),"\nThe satoshi amount will be calculated based on the current exchange rate."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"The body of the GraphQL request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation onChainPaymentSend($input: OnChainPaymentSendInput!) {\n  onChainPaymentSend(input: $input) {\n    errors {\n      message\n    }\n    status\n  }\n}\n")),(0,l.kt)(d.n,{mdxType:"OnChainUsdPaymentSend"}),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"send-a-transaction-in-satoshis"},"Send a transaction in satoshis"),(0,l.kt)("p",null,"Send a transaction onchain from your USD account with the amount denominated in satoshis.",(0,l.kt)("br",null)),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"The body of the GraphQL request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation onChainUsdPaymentSendAsBtcDenominated($input: OnChainUsdPaymentSendAsBtcDenominatedInput!) {\n  onChainUsdPaymentSendAsBtcDenominated(input: $input) {\n    errors {\n      message\n    }\n    status\n  }\n}\n")),(0,l.kt)(c.B,{mdxType:"OnChainUsdPaymentSendAsBtcDenominated"})),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"To test the GraphQL requests further use the GraphQL playground at ",(0,l.kt)("a",{parentName:"p",href:"https://api.blink.sv/graphql"},"api.blink.sv/graphql")," for mainnet or ",(0,l.kt)("a",{parentName:"p",href:"https://api.staging.galoy.io/graphql"},"api.staging.galoy.io/graphql")," for staging.\nCan also use the ",(0,l.kt)("a",{parentName:"p",href:"https://documenter.getpostman.com/view/29391384/2s9YCAQq3z#ed78e464-9874-4bf7-9b7b-92e5a898db83"},"Galoy API Postman collection")," to find examples in multiple programming languages.")))}f.isMDXComponent=!0}}]);